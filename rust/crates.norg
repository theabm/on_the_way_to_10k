
Managing Growing Projects with Packages, Crates, and Modules

___

When you write larger programs, organizing code becomes important. 

It is convenient to group code with related functionality to clarify 
what part of the code implements a certain feature.

In this section we cover Rust's /module system/: 
~ *Packages*: A Cargo Feature that lets you build, test, and share 
  crates.
~ *Crates*: A tree of modules that produces a library or executable.
~ *Modules* and *use*: Let you control the organization, scope, 
  and privacy of paths.
~ *Paths*: A way of naming an item, such as a struct, function,
  or module.

Furthermore we will discuss scopes and encapsulation.

* Packages and Crates

  We define some useful terms:

  $ Crate
  The smallest amount of code that the Rust compiler considers
  at a time.

  Crates can contain modules, and the modules may be defined in other
  files that get compiled with the crate.

  A crate can come in two forms: a binary crate or a library crate.

  $ Binary Crate
  Programs you can compile into an executable that you can run, such 
  as a command-line program or a server. It must have a function 
  called `main` that defines what happens when the executable runs. 

  $ Library Crates
  Programs that don't have a `main` function and don't compile to an 
  executable. They define functionality intended to be shared with 
  multiple projects. 
  Conceptually, this is what is known as a library.

  For example, the `rand` crate provides functionality that 
  generates random numbers. Most of the time, when Rustaceans say 
  /crate/ they mean a library crate.

  $ Crate Root
  The source file that the Rust compiler starts from. It is the root 
  module of your crate.

  $ Package
  A bundle of one or more crates that provides a set of functionality.
  It contains a `Cargo.toml` file that describes how to build those 
  crates. 

  A package can contain as many binary crates as we like, but at 
  most only one library crate. It must contain at least one crate, 
  either library or binary.

  When we run `cargo new` and use `ls` to see what Cargo creates, we 
  see that there's a /Cargo.toml/ file, which gives us a package.

  There's also a /src/ directory that contains /main.rs/. If we open 
  /Cargo.toml/ we see there is no mention of /src/main.rs/. Cargo 
  follows a convention that /src/main.rs/ is the crate root of a 
  binary crate with the same name as the package.

  Cargo knows that if the package directory contains /src/lib.rs/, the 
  package contains a library crate with the same name as the package, 
  and /src/lib.rs/ is its crate root.

  Cargo passes the crate root files to `rustc` to build the library 
  or the binary.

  If we run `cargo new my-project` then we only have a /src/main.rs/, 
  meaning it only contians a binary crate named `my-project`.
  If a package contains /src/main.rs/ and /src/lib.rs/ it has two crates: 
  a binary and a library, both with the same name as the package.

  A package can have multiple binary crates by placing files in the 
  /src/bin/ directory: each file will be a separate binary crate.

  For example, suppose that we have the following structure for the 
  package `foobar`.

  - foobar
  --- Cargo.toml
  --- build.rs
  --- src/
  ------ main.rs
  ------ util.rs
  ------ lib.rs
  ------ bin/
  --------- alt.rs

  This package contains 3 crates. 
  ~ main.rs: produces a binary crate  
  ~ lib.rs: produces a library crate 
  ~ bin/alt.rs: produces a binary crate

  The `util.rs` would be presumably used as a module within one of 
  these crates, but it is not a special filename recognized by Rust.
  So it would not be its own crate. `build.rs` is a build script.

* Defining Modules to Control Scope and Privacy

  Now we talk about modules and other parts of the module system: 
  - /paths/ that allow you to name items
  - the `use` keyword that brings a path into scope 
  - the `pub` keyword to make items public
  - the `as` keyword
  - external packages
  - the `glob` operator

  First we list some rules for easy reference:
  ~ *Start from the crate root*: The compiler first looks in the crate 
    root file (/src/lib.rs/ for a library crate or /src/main.rs/ for 
    a binary crate) for code to compile.
  ~ *Declaring modules*: In the crate root file, we can declare new
    modules. Say you declare a /garden/ module with `mod garden;`. The 
    compiler will look for the module's code in these places.
  -- Inline, within curly brackets that replace the semicolon following 
     `mod garden`.
  -- In the file /src/garden.rs/
  -- In the file /src/garden/mod.rs/
  ~ *Declaring submodules*: In any file other than the crate root, you  
    can declare submodules. For example, you may declare `mod vegetables;`
    in /src/garden.rs/. The compile will look for the submodule's code 
    within the directory named for the parent module in these places:
  -- Inline, following `mod vegetables` with curly brackets
  -- In the file /src/garden/vegetables/
  -- In the file /src/garden/vegetables/mod.rs
  ~ *Paths to code in modules*: Once a module is part of your crate, 
    you can refer to code in that module from anywhere else in that 
    same crate, _*as long as the privacy rules allow it*_. To do so, we use 
    the path in the code.
    For example, an `Asparagus` type in the garden vegetables module, would 
    be found at `crate::garden::vegetables::Asparagus`.
  ~ *Private vs Public*: Code within a module is *private* from its parent 
    modules by default. To make a module public, declare it with `pub mod`
    instead of `mod`. To make items within a public module public as well, 
    use `pub` before their declarations.
  ~ *The `use` keyword*: Within a scope, the `use` keyword creates 
    shortcuts to items to reduce repetition of long paths. In any scope 
    that can refer to `crate::garden::vegetables::Asparagus`, you can 
    create a shortcut with `use crate::garden::vegetables::Asparagus`.
    And from then on, you only need to write `Asparagus` to make use of 
    that type in the scope.

  Earlier, we mentioned that /src/main.rs/ and /src/lib.rs/ are called 
  /crate roots/. The reason for their name is that the contents of 
  either of these two files form a module named /crate/ at the root 
  of the crate’s module structure, known as the module tree.

* Paths for Referring to an Item in the Module Tree

  We need a path to tell Rust where an item is in a module tree.

  It can take two forms:
  ~ An absolute path starting from the crate root. For code from an 
    external crate, it begins with the crate name. For code from the 
    current crate, it starts with `crate`.
  ~ A relative path starting from the current module and uses `self`, 
    `super`, or an identifier in the current module.

  An example is shown:
  @code rust
  // this example doesn't compile because of missing pub keywords
  mod front_of_house {
      mod hosting {
          fn add_to_waitlist() {}
      }
  }

  pub fn eat_at_restaurant() {
      // Absolute path
      crate::front_of_house::hosting::add_to_waitlist();

      // Relative path
      front_of_house::hosting::add_to_waitlist();
  }
  @end

  The analogy is the same as a file system. Instead of `/` to indicate 
  the root directory, we use `crate::`. 
  And if we want to use a relative path, instead of `./module` we use 
  `module/` directly. Note that `module` must be at the same level of 
  the current module we are calling from (similar to a filesystem).

  We generally prefer to specify absolute paths.

  However, we need to remember that in Rust all items are private 
  to parent modules by default. Items in parent modules cannot use 
  items in child modules, but items in child modules can use items 
  in their ancestor modules. Siblings modules also can access each 
  other.

  This is because child modules wrap and hide their implementation 
  details but they can see the context in which they're defined.

  Rust chose this so that hiding inner implementation details is the 
  default. This way, you know which parts of the inner code you can 
  change without breaking outer code.

  Therefore, just using the correct path may cause a compile error 
  if the function is private. To expose inner parts of a child module 
  to outer ancestor modules, we use the `pub` keyword.

** Exposing Paths with the pub Keyword

   An important concept is that making a module public with `pub`
   allows code in its ancestor modules to *refer* to it, not *access* its 
   inner code. 

   To make specific items accessible *within* a public module, 
   we need to mark them as `pub` as well.

   Therefore, a module marked as `pub` is useless if none of its inner 
   items are marked `pub`. 

   A module can access a sibling module not marked as `pub` because 
   they are siblings.

   We show an example below:
   @code rust
   mod front_of_house {
       pub mod hosting {
           pub fn add_to_waitlist() {}
       }
   }

   pub fn eat_at_restaurant() {
       // Absolute path
       crate::front_of_house::hosting::add_to_waitlist();

       // Relative path
       front_of_house::hosting::add_to_waitlist();
   }
   @end
   In the absolute path, we start with crate, the root of our crate’s 
   module tree. The `front_of_house` module is defined in the crate 
   root. While `front_of_house` isn’t public, because the 
   `eat_at_restaurant` function is defined in the same module as 
   `front_of_house` (that is, `eat_at_restaurant` and `front_of_house` are 
   siblings), we can refer to `front_of_house` from `eat_at_restaurant`. 
   Next is the `hosting` module marked with `pub`. We can access the 
   parent module of `hosting`, so we can access `hosting`. Finally, the 
   `add_to_waitlist` function is marked with `pub` and we can access its 
   parent module, so this function call works!

   In the relative path, the logic is the same as the absolute path 
   except for the first step: rather than starting from the crate 
   root, the path starts from front_of_house. The front_of_house 
   module is defined within the same module as eat_at_restaurant, 
   so the relative path starting from the module in which 
   eat_at_restaurant is defined works. Then, because hosting and 
   add_to_waitlist are marked with pub, the rest of the path works, 
   and this function call is valid!


** Best Practices for Packages with a Binary and a Library

   As mentioned, a package can contain both a /src/main.rs/ binary crate 
   root as well as a /src/lib.rs/ library crate root. Both crates 
   will have the package name as default.

   The module tree should be defined in /src/lib.rs/. Then, any public 
   items can be used in the binary crate by starting paths with the  
   name of the package. The binary crate becomes a user of the library 
   crate just like a completely external crate would use the library  
   crate: it can only use the public API. 

   This helps design a good API since you are also thinking as a client 
   of the library.

** Starting Relative Paths with super

   We can construct relative paths that begin in the parent module, rather
   than the current module or the crate root, by using `super` at the 
   start of the path. 
   This is like `..` in a filesystem.

** Making Structs and Enums Public

   Using `pub` with structs and enums requires a bit of additional care. 

*** Structs

    If we use `pub` before a struct definition, we make the struct public, 
    but it's fields will still be private.
    To make the field public, we need to mark them with `pub`.

    This also holds true for struct tuples.

    We also need to mark methods inside `impl` blocks as `pub` if we 
    want them to be public.

    *If a struct has a private field, we need to provide a public 
    associated function that constructs an instance of it.*
    Otherwise, since there is a private field we cannot access, we would 
    not be able to create an instance.
    @code rust
    mod back_of_house {
        pub struct Breakfast {
            pub toast: String,
            seasonal_fruit: String,
        }

        impl Breakfast {
            pub fn summer(toast: &str) -> Breakfast {
                Breakfast {
                    toast: String::from(toast),
                    seasonal_fruit: String::from("peaches"),
                }
            }
        }
    }

    pub fn eat_at_restaurant() {
        // Order a breakfast in the summer with Rye toast
        let mut meal = back_of_house::Breakfast::summer("Rye");
        // Change our mind about what bread we'd like
        meal.toast = String::from("Wheat");
        println!("I'd like {} toast please", meal.toast);

        // The next line won't compile if we uncomment it; we're not allowed
        // to see or modify the seasonal fruit that comes with the meal
        // meal.seasonal_fruit = String::from("blueberries");
    }
    @end

*** Enums

    If we make an enum public, all of its variants are then public.
    We only need `pub` before the `enum` keyword.
    @code rust
    mod back_of_house {
        pub enum Appetizer {
            Soup,
            Salad,
        }
    }

    pub fn eat_at_restaurant() {
        let order1 = back_of_house::Appetizer::Soup;
        let order2 = back_of_house::Appetizer::Salad;
    }
    @end
    Enums are not very useful unless their variants are public. 
    It would be annoying ot have to annotate each variant with `pub`
    in every case, so the default for enum variants is to be public.

    The last thing to discuss regarding `pub` is the keyword `use`. 
    First we discuss `use` and then how it combines with `pub`.

* Bringing Paths into Scope with the use Keyword

  To avoid repeating the path - relative or absolute - to call a function 
  every time, we can use the `use` keyword which creates a shortcut 
  to the path that we can use.

  @code rust
  mod front_of_house {
      pub mod hosting {
          pub fn add_to_waitlist() {}
      }
  }

  // we bring hosting module into scope 
  // to specify inner items, just use hosting 
  // keyword
  use crate::front_of_house::hosting;
  // one could also write 
  // use crate::front_of_house::hosting::add_to_waitlist;
  // and later simply use add_to_waitlist().
  // however, the first way is prefereable, as we discuss below

  pub fn eat_at_restaurant() {
      // use hosting keyword only
      hosting::add_to_waitlist();
  }
  @end

  Adding `use` and a pth in a scope is similar to creating a symbolic 
  link in the filesystem.

  By adding `use::crate::front_of_house` in the crate root, `hosting`
  is now a valid name in that scope, as if it had been defined as 
  a module there.

  Paths brought into scope with `use` also check privacy, like any 
  other paths.

  `use` only creates the shortcut for the particular scope in which 
  it occurs. 
  For example, this program won't compile since `customer` is a 
  different scope than where `use` is called.

  @code rust
  mod front_of_house {
      pub mod hosting {
          pub fn add_to_waitlist() {}
      }
  }

  use crate::front_of_house::hosting;

  mod customer {
      pub fn eat_at_restaurant() {
          hosting::add_to_waitlist();
      }
  }
  @end

  The error says that `use` is no longer used in its scope.
  To fix it, put `use` within the customer module too, or 
  reference the shortcut in the parent module with `super::hosting`
  within the child `customer`.

** Creating Idiomatic use Paths

   It is prefereable to bring a function scope with `use` by specifying 
   the parent module rather than the full path to the function. 

   In the first case, we have to specify the parent module when calling 
   the function, which makes it clear that the function is not locally 
   defined, while minimizing repetition.

   In the second case, it is not clear where the function is defined.

*** Enums, Structs, and other items

    When bringing structs, enums, and other items with `use`, its 
    better to specify the full path.

    For example, this is how we would bring the `HashMap` struct into 
    scope:

    @code rust
    use std::collections::HashMap;

    fn main() {
        let mut map = HashMap::new();
        map.insert(1, 2);
    }
    @end

    There's no particular reason for this. It's just the way people 
    have been doing things.

    The only exception is if we are bringing two items with the same 
    name into scope.
    To do this, we could bring the parent modules into scope and then 
    specify the type. For example:
    @code rust
    use std::fmt;
    use std::io;

    fn function1() -> fmt::Result {
        // --snip--
    }

    fn function2() -> io::Result<()> {
        // --snip--
    }
    @end

** Providing New Names with the as Keyword

   Another solution to the problem of bringing two items with the same 
   name into scope is to use the `as` keyword.
   This allows us to define a local name or /alias/ for the type.
   @code rust
   use std::fmt::Result;
   use std::io::Result as IoResult;

   fn function1() -> Result {
       // --snip--
   }

   fn function2() -> IoResult<()> {
       // --snip--
   }
   @end

** Re-exporting Names with pub use

   When we bring a name into scope with the `use` keyword, the name 
   available in the new scope is private. 

   To enable the code that calls our code to refer to that name as if
   it had been defined in that code's scope, we can combine `pub` 
   and `use`. This is called /re-exporting/ because we're bringing 
   an item into scope but also making that item available for others 
   to bring into their scope.

   An example is shown below:
   @code rust
   mod front_of_house {
       pub mod hosting {
           pub fn add_to_waitlist() {}
       }
   }

   pub use crate::front_of_house::hosting;

   pub fn eat_at_restaurant() {
       hosting::add_to_waitlist();
   }
   @end

   Before this change, external code would have to call the 
   `add_to_waitlist` function by using the path 
   `restaurant::front_of_house::hosting::add_to_waitlist()`. Now 
   that this pub use has re-exported the `hosting` module to the 
   root module, external code can now use the path 
   `restaurant::hosting::add_to_waitlist()` instead.

   Re-exporting is useful when the internal structure of your code 
   is different from how programmers calling your code would think 
   about the domain.

   With `pub use`, we can write our code with one structure but
   expose a different structure.

** Using External Packages

   When using an external package, we have to add it to /Cargo.toml/ 
   as a dependency.
   For example, to use the `rand` package, we add: 

   @code rust
   // we need to specify the version
   rand = "0.8.5"
   @end

   This makes Cargo download `rand` and any dependencies and make it 
   available for our project.

   To bring `rand` definitions into scope, we do something like this:
   @code rust
   // bring Rng trait into scope
   use rand::Rng;

   fn main() {
       // use thread_rng from rand
       let secret_number = rand::thread_rng().gen_range(1..=100);
   }
   @end

   All Rust packages are available at {crates.io} and pulling any 
   of them into your packages involves these same steps:
   ~ listing them in /Cargo.toml/
   ~ Use `use` keyword to bring items from their crates into scope

   The standard library is shipped with Rust so we dont need to add it
   to /Cargo.toml/. However, we do have to use `use` to bring items 
   into scope.

** Using Nested Paths to Clean Up Large use Lists

   If we are using multiple items defined in the same crate or module, 
   listing each item can take up a lot of space and be repetitive. 

   For example:
   @code rust 
   // --snip--
   use std::cmp::Ordering;
   use std::io;
   // --snip--
   @end

   To avoid this, we can use /nested paths/. This allows us to do this 
   in one line by specifying the common part of the path, followed by 
   `::` and then curly brackets around a list of the parts of the path 
   that differ.

   For example:
   @code rust
   // --snip--
   use std::{cmp::Ordering, io};
   // --snip--
   @end

** The Glob Operator

   If we want to bring *all* public items defined in a path into scope, 
   we can specify that path followed by the `*` glob operator.

   For example:
   @code rust
   use std::collections::*;
   @end

   This brings all public items defined in `std::collections` into the 
   current scope.

   However, with this method we can't know all the names that are brought 
   into scope. This can cause name clashing so be careful.

* Separating Modules into Different Files

  So far, all the examples have defined multiple modules in one file.

  When modules get large, we separate them into different files to be 
  better organized.

  For example, we could move `front_of_house` into another file.
  Our /main/lib.rs/ will look like this:
  @code rust
  // this code wont compile until we create the /src/front_of_house.rs
  // file

  // module declaration
  mod front_of_house;

  pub use crate::front_of_house::hosting;

  pub fn eat_at_restaurant() {
      hosting::add_to_waitlist();
  }
  @end

  We then create a /src/front_of_house.rs/ file which looks like:
  @code rust 
  pub mod hosting {
      pub fn add_to_waitlist() {}
  }
  @end
  Note that you only need to load a file using a mod declaration 
  once in your module tree. Once the compiler knows the file is part 
  of the project (and knows where in the module tree the code resides 
  because of where you’ve put the mod statement), other files in your 
  project should refer to the loaded file’s code using a path to 
  where it was declared, as covered in the “Paths for Referring to an 
  Item in the Module Tree” section. In other words, mod is not an 
  “include” operation that you may have seen in other programming 
  languages.

  Next, we’ll extract the `hosting` module to its own file. The process 
  is a bit different because `hosting` is a child module of 
  `front_of_house`, not of the root module. We’ll place the 
  file for `hosting` in a new directory that will be named for its 
  ancestors in the module tree, in this case /src/front_of_house\//.

  To start moving `hosting`, we change /src/front_of_house.rs/ to 
  contain only the declaration of the hosting module:
  @code rust
  // file src/front_of_house.rs
  pub mod hosting;
  @end
  Then we create a /src/front_of_house/ directory and a file `hosting.rs` 
  to contain the definitions made in the `hosting` module:
  @code rust
  // file src/front_of_house/hosting.rs
  pub fn add_to_waitlist() {}
  @end

  If we instead put `hosting.rs` in the /src/ directory, the compiler 
  would expect the `hosting.rs` code to be in a `hosting` module 
  declared in the crate root, and not declared as a child of the 
  `front_of_house` module. The compiler’s rules for which files to 
  check for which modules’ code means the directories and files 
  more closely match the module tree.

  The `mod` keyword declares modules, and *Rust looks in a file with
  the same name as the module for the code that goes into that module.*


