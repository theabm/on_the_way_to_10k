We look at */enums/*.

They allow you to define a type by enumerating the possible variants. 

* Defining an Enum

  While structs give you a way to tie together related fields of data, 
  enums give you a way of saying a value is a possible set of values.

  Suppose we need to work with IP addresses. Today, we have two major 
  standards: IPv4 and IPv6. 
  Any IP address can be either v4 or v6, not both.  In both cases they 
  are still an IP address, so they should be treated the same. This 
  property makes enums appropriate because an enum value can only be 
  one of its variants. However, they are described by the same type.

  We can express this as follows:
  @code rust
  // enum definition 
  enum IpAddrKind {
      // here we list the two variants it can have
      V4,
      V6,
  }
  @end
** Enum Values

   We can create instances like this:

   @code rust 
   let four = IpAddrKind::V4;
   let six = IpAddrKind::V6;
   @end

   The variants are namespaced under its identifier and we use `::` to 
   separate the two.
   However, both `IpAddrKind::V4` and `IpAddrKind::V6` are of the 
   same type: `IpAddrKind`.
   So we can write a function that takes any `IpAddrKind`:

   @code rust 
   fn route(ip_kind: IpAddrKind){}
   route(IpAddrKind::V4);
   route(IpAddrKind::V6);
   @end

** Storing Data in Enums

   To store data with an Enum, we can do the following:
   @code rust
   fn main() {    
       enum IpAddr {
           // this says that each variant have associated String values
           V4(String),
           V6(String),
       }

       let home = IpAddr::V4(String::from("127.0.0.1"));

       let loopback = IpAddr::V6(String::from("::1"));
   }
   @end

   This new definition of the IpAddr enum says that both V4 and V6 
   variants will have associated `String` values.

   Also, we see that the name of each enum variant is a constructor for 
   that instance of the enum.
   Therefore, `IpAddrKind::V4()` is a function that takes a `String` and 
   returns an instance of `IpAddrKind`.

   Furthermore, each variant can have different types and amounts of 
   associated data. For example:
   
   @code rust
   fn main() {
       enum IpAddr {
           V4(u8, u8, u8, u8),
           V6(String),
       }

       let home = IpAddr::V4(127, 0, 0, 1);

       let loopback = IpAddr::V6(String::from("::1"));
   }
   @end

   Wanting to store an IP address is so common that the standard library 
   has a `IpAddr` definition we can use! We need to bring it into scope 
   to use it, but it is defined as follows:

   @code rust
   struct Ipv4Addr {
       // --snip--
   }

   struct Ipv6Addr {
       // --snip--
   }

   enum IpAddr {
       V4(Ipv4Addr),
       V6(Ipv6Addr),
   }
   @end

   As we can see, the variants are constructed with custom structs.
   This shows that you can put any kind of data inside an enum variant: 
   strings, numeric types, structs, or other enums.

   We could also do something more complex:

   @code rust
   enum Message {
       // quit no data associated with it
       Quit,
       // has named fields, like a struct does
       Move { x: i32, y: i32 },
       // write includes a single string
       Write(String),
       // changecolor includes three i32 values
       ChangeColor(i32, i32, i32),
   }
   @end

   This is similar to defining different structs, except they are all 
   grouped together under the same `Message` type, which makes it 
   easier to define functions for this type.

   *_We can also define `impl` blocks to define methods for enums._*

** The Option Enum and Its Advantages Over Null Values

   `Option` is another enum defined by the standard library. 
   It encodes the common scenario in which a value could be something 
   or nothing.

   For example, if we request the first item in a non-empty list, you 
   would get a value. If you request the first item in an empty list, 
   you would get nothing.

   Expressing this concept in terms of the type system means that the 
   compiler can check whether you have handled all the cases you should 
   be handling. This prevents common bugs.

   Rust doesn't have the null feature that other languages have. /Null/ 
   represents there is no value. In languages with Null, a variable can 
   always be in two states: null or not-null.

   The problem with Null is that if you try to use a null value as a  
   not-null value, you will get an error.
   However, the concept of Null is useful.

   For this reason, Rust does not have Null, but it has an enum that
   can encode the concept of a value being present or absent. This 
   is `Option<T>`. The `<T>` is a generic type parameter. 
   @code rust
   enum Option<T> {
       None,
       Some(T),
   }
   @end

   The `<T>` means that the `Some` variant can hold one piece of data 
   of any type. Each concrete type that gets used in place of `T` makes 
   the overall `Option<T>` type a different type.

   This type is so useful it is included in the prelude. 
   Its variants are also included in the prelude and can be used 
   without the `Option::` prefix.

   Here are some examples:
   fn main() {
   @code rust
   // of type Option<i32>
   let some_number = Some(5);
   // of type Option<char>
   let some_char = Some('e');

   // we can't use None without type annotation because 
   // the compiler needs to know what T stands for.
   let absent_number: Option<i32> = None;
   }
   @end

   Why is having `Option<T>` any better than having null?

   Since `Option<T>` and `T` are different types, the compiler won't 
   let us use an `Option<T>` value as if it were definitely a 
   valid value. 

   For example, this won't compile:
   @code rust
   let x: i8 = 5;
   let y: Option<i8> = Some(5);

   let sum = x + y;
   @end
   The error message tells us that the compiler doens't understand how 
   to add an `i8` and an `Option<i8>` because they are different types.

   When we have a value of a type like `i8` in Rust, the compiler 
   will ensure that we always have a valid value. We can proceed 
   confidently without having to check for null before using that 
   value. Only when we have an `Option<i8>` (or whatever type of value 
   weâ€™re working with) do we have to worry about possibly not having
   a value, and the compiler will make sure we handle that case 
   before using the value.

   Basically, we have to convert an `Option<T>` to `T` before we can 
   do `T` operations with it. This helps catch issues with null such 
   as assuming something isn't null when it is.

   Also, to have a value that can possibly be null requires us to 
   explicitly use `Option<T>`. When we use this type, the compiler 
   requires us to explicitly handle the case when the value is null.

   Everywhere else that the value isn't `Option<T>`, we can safely assume 
   that the value isn't null. This is a deliberate design choice of Rust 
   to increase safety.

   So how do we get the `T` value out of a `Some` variant? The 
   `Option<T>` enum has a lot of methods that are useful.

   In general, to use an `Option<T>` value, you want to have code 
   that will handle each variant. You want some code that will run 
   only when you have `Some(T)`, and this code is allowd to use the 
   inner `T`. You also want some code to run only if you have a `None`
   variant, and that code doesn't have a `T` value available.

   The `match` expressions is a control flow construct that does just
   this.

* The match Control Flow Construct

   Rust has a powerful control flow construct called `match` that allows
   you to compare a value against a series of patterns and then 
   execute code based on which pattern matches.

   As we will see, the patterns are very flexible.

   The power of `match` comes from the expressiveness of the patterns 
   and fact that the compiler confirms that all possible cases are 
   handled.

   When we use a `match` expression, we execute the code of the *first* 
   pattern that is matched.
   An example of match is shown below:
   @code rust
   enum Coin {
       Penny,
       Nickel,
       Dime,
       Quarter,
   }

   // function returns value of coin in cents
   fn value_in_cents(coin: Coin) -> u8 {
       match coin {
           Coin::Penny => 1,
           Coin::Nickel => 5,
           Coin::Dime => 10,
           Coin::Quarter => 25,
       }
   }
   @end
   Let's analyze the snippet in detai.

   First we have a `match` keyword followed by an expression, which in 
   this case is the value of `coin`. This may seem similar to a conditional 
   expression used with an `if`, but there's a difference: for `if` 
   the condition needs to evaluate to a Boolean, while for `match` it 
   can be any type. In this case, the type is the `Coin` enum.

   Next, we have the `match` /*arms*/. An arm has two parts: a pattern 
   and some code, separated by `=>`. In the first arm, the pattern is 
   `Coin::Penny`, and the code is just the value `1`. We separate the 
   arms with a comma.

   As mentioned above, the `match` expression compares the value 
   of the expression against the pattern of each arm in order. It 
   execues the first pattern that matches.

   The code associated with each arm is also an expression, and the 
   resultant value of the matching arm is what gets returned from the 
   whole `match` expression.

   If the code for each arm is long, we use curly braces, and the comma 
   separator becomes optional.

** Patterns That Bind To Values

   Another useful feature of `match` arms, is that they can bind 
   to the parts of the values that match the pattern.
   This can be used to extract values out of enum variants.

   @code rust
   #[derive(Debug)]
   enum UsState {
       Alabama,
       Alaska,
       // --snip--
   }

   enum Coin {
       Penny,
       Nickel,
       Dime,
       // now quarted includes information about the 
       // state found on the quarter
       Quarter(UsState),
   }
   @end

   If we want to extract the state, we can deconstruct the pattern 
   for `Quarter` as follows:

   @code rust
   fn value_in_cents(coin: Coin) -> u8 {
       match coin {
           Coin::Penny => 1,
           Coin::Nickel => 5,
           Coin::Dime => 10,
           // now `state` binds to the value of that quarters 
           // state and can be used in the code for this arm
           Coin::Quarter(state) => {
               println!("State quarter from {:?}!", state);
               25
           }
       }
   }
   @end

   As we can see, adding a variable `state` to the pattern allows the 
   variable to bind to the value of that quarter's state when it is 
   matched. This can then be used in the code for that arm.

** Matching with Option\<T\>

   Previously, we wanted to extract the inner `T` value out of `Some`
   when using `Option<T>`. We can do this using `match`.
   For example suppose we have an `Option<i32>` and we want to add 1 
   to the value if it is present. We could do:

   @code rust
   fn plus_one(x: Option<i32>) -> Option<i32> {
       match x {
           None => None,
           Some(i) => Some(i + 1),
       }
   }

   let five = Some(5);
   let six = plus_one(five);
   let none = plus_one(None);
   @end

   This patterns is used frequently in Rust: we match against an enum, 
   bind a variable to the data inside, and then execute code based on it.

** Matches Are Exhaustive

   One important aspect of `match` is that the arms' patterns must cover 
   all possibilities. Consider this version of `plus_one`:
   @code rust 
   fn plus_one(x: Option<i32>) -> Option<i32> {
       match x {
           Some(i) => Some(i + 1),
       }
   }

   @end
   Since we don't handle the `None` case, this code would cause a bug.
   Luckily, Rust doesn't allow this code to compile. The error is: 
   "non-exhaustive patterns".

   Matches in Rust are *exhaustive*: we must exhaust every last 
   possibility in order for the code to be valid.
   In the case of `Option<T>`, Rust prevents us from forgetting 
   to explicitly handle the `None` case. This protects us from assuming 
   we always have a value, which keeps us safe from bugs caused by null.

** Catch-all Patterns and the _ Placeholder

   Using enums, we can decide to take special actions for a few 
   particular values, but for all other values take one default 
   action.

   For example:
   @code rust
   let dice_roll = 9;
   match dice_roll {
       3 => add_fancy_hat(),
       7 => remove_fancy_hat(),
       other => move_player(other),
   }

   fn add_fancy_hat() {}
   fn remove_fancy_hat() {}
   fn move_player(num_spaces: u8) {}
   @end

   In this case, if the roll is 3 or 7, we do something specific. If 
   the roll is anything else, we take a default action. 

   The last arm covers every other possible value, and the pattern 
   is the variable `other`. This variable will bind to the value of the 
   dice roll, and we can use it in the function.

   If we want a catch-all but don't want to bind the variable because 
   we won't use it, we can use `_` which tells Rust that we won't use 
   the variable, thus preventing warnings about unused variables.

   In both cases, the matching is exhaustive because the catch-all 
   pattern matches all possibilities. Catch-all patterns *must* be listed
   last, otherwise the other patterns will never be matched, causing 
   Rust to complain.

   An example using `_` is shown below:
   @code rust
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        _ => reroll(),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn reroll() {}
   @end

   In this case for all other dice values, we are just rerolling, so 
   we don't need to use the value, which is why we use `_`.

   We can also do the following:
   @code rust
   let dice_roll = 9;
   match dice_roll {
       3 => add_fancy_hat(),
       7 => remove_fancy_hat(),
       _ => (),
   }

   fn add_fancy_hat() {}
   fn remove_fancy_hat() {}
   @end
   In this case, if we roll anything other than a 3 or 7, we don't 
   do anything. This is expressed by returning the unit value in the 
   catch-all pattern.

** How Matches Interact with Ownership
   If an enum contains non-copyable data like a String, then you 
   should be careful with whether a match will move or borrow that 
   data. 

   For example, this program using `Option<String>` will compile:
   @code rust
   fn main() {
       let opt: Option<String> = 
       Some(String::from("Hello world"));

       match opt {
           Some(_) => println!("Some!"),
           None => println!("None!")
       };

       println!("{:?}", opt);
   }
   @end

   But if we replace `_` with a variable name like `Some(s)`, then 
   it will *not* compile.
   @code rust
   fn main() {
       let opt: Option<String> = 
       Some(String::from("Hello world"));

       match opt {
           // _ became s
           Some(s) => println!("Some: {}", s),
           None => println!("None!")
       };

       println!("{:?}", opt);
   }
   @end
   This is because `opt` was moved into `s`, so it has lost *R* 
   permissions. 

   If we want to use the contents of `opt` inside a match, and still be 
   able to use it later, then we have to match to a reference, 
   as shown below:
   @code rust
   fn main() {
       let opt: Option<String> = 
       Some(String::from("Hello world"));

       // opt became &opt
       match &opt {
           Some(s) => println!("Some: {}", s),
           None => println!("None!")
       };

       println!("{:?}", opt);
   }
   @end
   Rust will "push down" the reference from the outer enum,
   `&Option<String>`, to the inner field, `&String`. Therefore, 
   `s` has type `&String`, and `opt` can be used after the match.

   To better understand the pushing down mechanism, see this 
   {https://doc.rust-lang.org/reference/patterns.html#binding-modes}[section].


* Concise Control Flow with if let

  The `if let` syntax lets you combine `if` and `let` into a less 
  verbose way to handle values that match one pattern while 
  ignoring the rest.

  Consider the following case:
  @code rust
  let config_max = Some(3u8);
  match config_max {
      Some(max) => println!("The maximum is configured to be {}", max),
      _ => (),
  }
  @end
  If the value is `Some` we print the value inside by binding it to the 
  variable `max` in the pattern. We don't want to do anything with `None`. 
  However, to use the `match` we need to add `_=> ()` which is annoying 
  boiler plate.

  We can shorten this with `if let`. 
  @code rust
  let config_max = Some(3u8);
  if let Some(max) = config_max {
      println!("The maximum is configured to be {}", max);
  }
  @end

  The syntax `if let` takes a pattern and an expression separated by 
  an equal sign. It works the same way as a `match`, where the 
  expression is given to the `match` and the pattern is its first arm. 
  In this case, the pattern is `Some(max)`, and the `max` binds to the 
  value inside the `Some`. We can then use `max` in the body of the 
  `if let` block in the same way we used `max` in the corresponding 
  `match` arm. The code in the `if let` block isnâ€™t run if the value 
  doesnâ€™t match the pattern.

  Using `if let` means less typing and less boilerplate, but it also 
  loses the exhaustive checking that `match` enforces.

  We can include an `else` with `if let`. The block of code that goes 
  with `else` is the same as the block that is executed with `_` in 
  the `match` expression.

  So this:
  @code rust
  let mut count = 0;
  match coin {
      Coin::Quarter(state) => println!("State quarter from {:?}!", state),
      _ => count += 1,
  }

  @end
   
  Could be written as this:
  @code rust
  let mut count = 0;
  if let Coin::Quarter(state) = coin {
      println!("State quarter from {:?}!", state);
  } else {
      count += 1;
  }

  @end

  Generally speaking, if the function only has an effect in one 
  condition, an `if let` is most idiomatic.

  Otherwise, if the function needs to return a value for each 
  condition, then a match is most appropriate.

