A /struct/ is a custom data type that lets you group together 
and name multiple related values that make up a meaningful group.

We have already seen that one method to achieve this are *Tuples*. 
We will discuss when it is appropriate to choose one or the other.

We show how to define and instantiate structs. We also talk about 
associated functions called /methods/.

Structs and Enums are the building blocks to create new types in 
our programs to take full advantage of Rust's compile-time checking.

* Defining and Instatiating Structs
  Structs are similar to tuples in that both can hold different 
  data types. However, unlike tuples, in structs we name each 
  piece of data. This makes them more clear and flexible since we
  don't rely on the order to access the data.

  To *define* and *instantiate* a struct, we do the following: 
  @code rust 
  // we use the struct keyword and a name to define a struct
  struct User {
      // we define the name and types of the pieces of data 
      // which we call *fields*
      active: bool,
      username: String,
      email: String,
      sign_in_count: u64,
  }
  fn main() {
      // to instantiate, use the name of the struct followed by 
      // curly brackets. Inside we have key:value pairs where 
      // the key is the field name and the value is what we want to store
      // we dont have to use the same order as the definition
      let mut user1 = User {
          email: String::from("someone@example.com"),
          username: String::from("someusername123"),
          active: true,
          sign_in_count: 1,
      };
      // to access a specific value, use dot operator. 
      // if instance is mutable, we can change the value of 
      // a specific field.
      user1.email = String::from("anotheremail@example.com");
  }
  @end
  Note that to change the value of a field, the *entire* instance must 
  be mutable.
  *Rust doesnt allow us to mark only certain fields as mutable.*

  We can construct a new instance of a struct as the last expression in 
  a function body to implicitly return that new instance:
  @code rust
  fn build_user(email: String, username: String) -> User {
      User {
          active: true,
          username: username,
          email: email,
          sign_in_count: 1,
      }
  }
  @end
  It is annoying that we have to repeat the same names twice, such as 
  `email:email` and `username:username`. If we had more fields, it would 
  be cumbersome and error prone.

  Rust provides a convenient shorthand for this.

** Using The Field Init Shorthand
   Since the parameter names of the function and the struct field names 
   are _exactly_ the same in the previous snippet, we can use the 
   */field init shorthand/* to rewrite it.
   @code rust
   fn build_user(email: String, username: String) -> User {
       User {
           active: true,
           username,
           email,
           sign_in_count: 1,
       }
   }
   @end
   In this case, Rust will understand how we want to intialize the struct 
   which avoids useless repetition.

** Creating Instances from Other Instances with Struct Update Syntax
   We may want to create a new instance of a struct that includes most 
   of the values from another instance, but changes some.
   We can do this through the */struct update syntax/*.

   First we show how to do it manually:
   @code rust
   fn main() {
       let user1 = User {
           email: String::from("someone@example.com"),
           username: String::from("someusername123"),
           active: true,
           sign_in_count: 1,
       };

       let user2 = User {
           active: user1.active,
           username: user1.username,
           email: String::from("another@example.com"),
           sign_in_count: user1.sign_in_count,
       };
   }
   @end
   In this case, we create `user2` to be the same as `user1` but with 
   a different email.

   Using the struct update syntax we can do the same with less code:
   @code rust
   let user2 = User {
       // we first list the fields we want changed
       email: String::from("another@example.com"),
       // and *at the end* list the struct we wish to take 
       // the remaining values from
       ..user1
   };
   @end
   The `..user1` must come last to specify that any remaining fields 
   should get their values from the corresponding fields in `user1`. 

   Note that in both cases, we are using `=` like an assignment. 
   Since strings do not implement the `Copy` trait and we are 
   assigning the same username to both users, ownership of the 
   username is moved to `user2`. This means that `user1` is not 
   usable after this operation. 
   If we had given `user2` new string values for *both* username 
   and email, then we could safely use both, since the types of 
   `active` and `sign_in_count` implement the `Copy` trait.

** Tuple Structs
   Rust supports an intermediate type between Structs and Tuples - the 
   */tuple struct/*. 
   Tuple structs allow /naming/ of the type, but dont have field names -  
   just the types.

   They are useful when we want to give the whole tuple a name to 
   differentiate from other tuples, but dont require naming fields. 

   To define and instantiate:
   @code rust 
   // definition of two tuple structs with name Color and Point
   // As we can see, we only declare the types of the fields, not 
   // the names
   struct Color(i32, i32, i32);
   struct Point(i32, i32, i32);

   fn main() {
       // To instantiate:
       let black = Color(0, 0, 0);
       let origin = Point(0, 0, 0);
   }
   @end
   Note that `black` and `origin` are different types because they are 
   instances of different tuple structs.
   *_Each struct you define is its own type, even though the fields 
   within the struct might have the same types._*

   In this case, a function that takes a `Color` type cannot take 
   a `Point` type even though both are made up of three `i32` values.

   For all other behavior, tuple structs are similar to tuples. We 
   can destructure them into individual pieces and use a `.` operator 
   to access individual values.

** Unit-Like Structs Without Any Fields
   We can also define structs that don't have any fields. 
   They are called /*unit-like*/ structs because they behave similarly 
   to `()` - aka the unit type. 

   They are useful when you need to implement a trait on some type, 
   but don't have any data that you want to store in the type 
   itself. We will talk more about it later.

   Here is an example:
   @code rust
   // to define it, simply use the struct keyword, the name, and a 
   // semicolon. No curly brackets or parenthesis.
   struct AlwaysEqual;

   fn main() {
       // to instantiate, just use the name and a semicolon. No curly 
       // brackets or parenthesis.
       let subject = AlwaysEqual;
   }
   @end
   Imagine that later weâ€™ll implement behavior for this type such that
   every instance of AlwaysEqual is always equal to every instance of 
   any other type, perhaps to have a known result for testing purposes.

** Ownership of Struct Data
   In the `User` struct definition in the first snippet, we used the 
   owned `String` type rather than `&str` string slice type.

   This is a deliberate choice because we want the struct to own all 
   of its data and for the data to be valid as long as the entire 
   struct is valid. 

   However, it is also possible to store references to data owned by 
   something else. To do so requires the use of /lifetimes/, a Rust 
   feature that ensires that the data referenced by a struct is valid 
   for as long as the struct is. 

   This will be discusses later.

** Borrowing Fields of a Struct
   Similar to what we discusses in {:rust/ownership:# Fixing a Safe Program: Mutating Different Tuple Fields}[Different Tuple Fields],
   the borrow checker will track ownership permissions at both struct-level 
   and field-level. 

   For example, if we borrow a field `x` of a `Point` struct, then 
   both `p` and `p.x` temporarily lose their permissions, but not 
   `p.y`
   @code rust 
   fn main() {
       struct Point { x: i32, y: i32 }

       let mut p = Point { x: 0, y: 0 };
       let x = &mut p.x;
       *x += 1;
       println!("{}, {}", p.x, p.y);
   }
   @end
   However, if we try to use `p` while `p.x` is mutably borrowed, 
   we get a compile time error. 
   For example, this is not valid:
   @code rust 
   struct Point { x: i32, y: i32 }

   fn print_point(p: &Point) {
       println!("{}, {}", p.x, p.y);
   }

   fn main() {
       let mut p = Point { x: 0, y: 0 };
       let x = &mut p.x;
       print_point(&p);
       *x += 1;
   }
   @end

   In general, if you encounter an ownership error that involves a struct, 
   you should consider which fields of your structure are supposed to 
   be borrowed with which permissions.
   Be aware of the borrow checkers limitations, since rust may sometimes 
   assume more fields are borrowed than they actually are.

* An Example Program Using Structs

  To understand when we might want to use structs lets write a program 
  that calculates the area of a rectangle.

  We use single variables first and then use structs.

  @code rust 
  fn main() {
      let width1 = 30;
      let height1 = 50;

      println!(
      "The area of the rectangle is {} square pixels.",
      area(width1, height1)
  );
  }

  fn area(width: u32, height: u32) -> u32 {
      width * height
  }
  @end

  This program does what we want, but it has some pitfalls. The two 
  values are not related at all coceptually, and the `area` function 
  takes two parameters, rather than a "rectangle". 

  We can refactor with tuples:
  @code rust
  fn main() {
      let rect1 = (30, 50);

      println!(
      "The area of the rectangle is {} square pixels.",
      area(rect1)
  );
  }

  fn area(dimensions: (u32, u32)) -> u32 {
      dimensions.0 * dimensions.1
  }
  @end
  Although better, the code still has some drawbacks. There is no 
  naming and it is unclear what we are doing by simply reading.

  Furthermore, for the area, changing the order of width and heigh doesn't 
  matter, but for some other operation it may make a difference. 
  With this method we have to keep track that the first index is the width 
  and the second one is the height. If we were to change this in the 
  definition of the tuple, we would need to change it everywhere else. 
  This is very error prone. 


  We can refactor using structs:
  @code rust
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let rect1 = Rectangle {
          width: 30,
          height: 50,
      };

      println!(
      "The area of the rectangle is {} square pixels.",
      area(&rect1)
  );
  }

  fn area(rectangle: &Rectangle) -> u32 {
      rectangle.width * rectangle.height
  }
  @end
  Now our code is much clearer and flexible. If we were to change the 
  order of our field names, it wouldn't matter. Also, since we are 
  naming the fields, the definition of area is much clearer.

  It would be nice to be able to print an instance of `Rectangle` to be 
  able to visualize all the fields and debug our program.
  If we simply use the `println!` macro, it wont work because the 
  struct doesn't have the `std::fmt::Display` method implemented, which 
  the `println!` macro uses by default.
  All primitive types implement this method by default. 

  However the compiler error tells us to use `{:\?}` instead of `{}`.
  Putting the `:\?` specifier tells `println!` to use the `Debug` format.
  The `Debug` trait enables us to print our struct in a way that is 
  useful to see its values.

  When trying to use this, we still get an error!
  `Rectangle doesn't implement Debug`

  However, it tells us how to fix it:
  `add \#[derive(Debug)] to Rectangle or manually impl Debug for Rectangle`

  Rust does include functionality to print out debugging information, 
  but we have to explicitly ask for it. 
  To do this, we add the outer attribute `\#[derive(Debug)]` just 
  before the struct definition, as shown below:
  @code rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let rect1 = Rectangle {
          width: 30,
          height: 50,
      };

      println!("rect1 is {:?}", rect1);
  }
  @end
  Now the code with `{:\?}` compiles. It is not the prettiest, but it 
  works.

  For larger structs, it's useful to have output that is easier to read. 
  For these cases, we can use `{:\#\?}` instead of `{:\?}`.

  Another way to print out a value using the `Debug` format is to use 
  the `dbg!` macro, which takes ownerhsip of an expression (as opposed 
  to `println!` which takes a reference), prints the file and line 
  number of where that `dbg!` macro call occurs in your code along 
  with the resultant value of that expression, and returns ownership 
  of the value.

  However, the `dbg!` macro prints to `stderr` rather than `stdout` which 
  is where `println!` prints.

  Here is an example:
  @code rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  fn main() {
      let scale = 2;
      let rect1 = Rectangle {
          // print debug info for width field
          // note that since dbg! gives back ownership, 
          // the width field will get the same value 
          // as if we didnt have the dbg! call there. 
          width: dbg!(30 * scale),
          height: 50,
      };

      // on the other hand, we dont want dbg! to take ownership 
      // of rect1, otherwise it becomes unusable, so we pass a 
      // reference.
      dbg!(&rect1);
  }
  @end
  We can see that the program will print the value of the width
  and the value of the struct using the pretty printing.
  The `dbg!` macro is very useful to understand what is going on in your 
  code.

  In addition to the `Debug` trait, Rust has provided a number of 
  traits for us to use with the `derive` attribute that can add 
  useful behavior to our custom types. 

  These are discussed in Appendix C.

  We will cover how to implemetn these traits with custom behavior as 
  weel as how to create your own traits later.

  Finally, our `area` function is very specific and works *only* with 
  a `Rectangle` type. It would be nice to tie this behavior even closer 
  to the `Rectangle` type. We can do this by turning the `area` function 
  into an `area` *method* defined on our `Rectangle` type.


* Method Syntax
  Methods are similar to functions. 
  - We declare them with the `fn` keyword and a name. 
  - They can have parameters and a return value.
  - They contain code that is executed when the method is called from 
    elsewhere.

  Unlike functions, methods are defined within the context of a struct 
  (or an enum or trait).
  *_Their first parameter is always `self`_*, which represents the 
  instance of the struct the method is being called on.

** Defining Methods
   Let's change the `area` function that has a `Rectangle` instance 
   as a parameter and instead make an `area` method defined on the 
   `Rectangle` struct.
   @code rust 
   #[derive(Debug)]
   struct Rectangle {
       width: u32,
       height: u32,
   }

   // how we define a method.
   impl Rectangle {
       fn area(&self) -> u32 {
           self.width * self.height
       }
   }

   fn main() {
       let rect1 = Rectangle {
           width: 30,
           height: 50,
       };

       println!(
       "The area of the rectangle is {} square pixels.",
       rect1.area()
   );
   }
   @end
   To define a method, we start and `impl` block for `Rectangle`. 
   Everything within this block is associated to the `Rectangle` type.

   The `area` function is moved inside the `impl` block and the first 
   parameter is changed to `&self` in the signature and in the body.
   To call the function we use the /method syntax/ which uses the 
   `.` operator on the instance, followed by the method name, 
   parenthesis, and any arguments.

   In the signature for `area` we use `&self` instead of 
   `rectangle: &Rectangle`. The former is short for `self: &Self`. 

   _Within an `imp` block, the type `Self` is an alias for the type 
   that the `impl` block is for._

   MEthods must have a parameter named `self` of type `Self` as the 
   first parameter, so Rust lets you abbreviate this with only the name 
   `self`. We still need to use the `&` in front of `self` to denote that 
   this method borrows the `Self` instance, just as we did for 
   `rectangle: &Rectangle`.

   Methods can take ownership of `self`, borrow `self` immutably, or 
   borrow `self` mutably.

   If we wanted a mutable borrow we'd use `&mut self`. Having a method 
   take ownership of `self` is rare and only done when the method 
   transforms the instance into something else and we want to prevent 
   the caller from using the original instance again.

   The reason to use methods instead of functions is:
   - use method syntax 
   - avoid repeition of type of `self`
   - organization - group all functions for type in one `impl` block rather 
     than have them scattered and hard to find.

   We can have methods that have the same name as a field of a struct.
   @code rust
   impl Rectangle {
       fn width(&self) -> bool {
           self.width > 0
       }
   }

   fn main() {
       let rect1 = Rectangle {
           width: 30,
           height: 50,
       };

       if rect1.width() {
           println!("The rectangle has a nonzero width; it is {}", rect1.width);
       }
   }
   @end

   Methods with same name as fields usually return the value in the 
   field and nothing else. These are called /getters/ and are not 
   implemented automatically by Rust as in other languages.

   Getters are useful because you can make the field private but the 
   method public, thus enabling read-only access to that field.
   We will discuss this later.

   Another example of a method is shown below.
   @code rust
   #[derive(Debug)]
   struct Rectangle {
       width: u32,
       height: u32,
   }

   impl Rectangle {
       fn area(&self) -> u32 {
           self.width * self.height
       }

       fn can_hold(&self, other: &Rectangle) -> bool {
           self.width > other.width && self.height > other.height
       }
   }

   fn main() {
       let rect1 = Rectangle {
           width: 30,
           height: 50,
       };
       let rect2 = Rectangle {
           width: 10,
           height: 40,
       };
       let rect3 = Rectangle {
           width: 60,
           height: 45,
       };

       println!("Can rect1 hold rect2? {}", rect1.can_hold(&rect2));
       println!("Can rect1 hold rect3? {}", rect1.can_hold(&rect3));
   }
   @end

** Associated Functions
   All functions defined witin an `impl` block are called associated 
   functions because they are associated to the type named after the 
   `impl`.

   We can also define associated functions that don't have `self` as 
   the first parameters (so, not a method), because they don't need 
   an instance of the type to work with.
   One example is `String::from`.

   *_Associated functions that aren't methods are often constructors that 
   return a new instance of the struct._*

   They are often called `new` but this is not a special name and it's not 
   built into the language. Below is an example.
   @code rust
   impl Rectangle {
       fn square(size: u32) -> Self {
           Self {
               width: size,
               height: size,
           }
       }
   }
   @end
   The `Self` keyword in the return type and in the body are aliases 
   for the type that appears after the `impl` keyword.

   To call this associated function we use the `::` syntax with the 
   struct name.
   The `::` syntax is used for both associated functions and namespaces 
   created by modules.

** Multiple impl Blocks

   Each struct is allowed to have multiple `impl` blocks. 
   This is more useful when using generic types and traits.

** Methods Calls are Syntactic Sugar for Function Calls
   All methods are syntactic sugar for calls using the `::` operator.

   @code rust
   let mut r = Rectangle { 
       width: 1,
       height: 2
   };
   let area1 = r.area();
   let area2 = Rectangle::area(&r);
   assert_eq!(area1, area2);

   r.set_width(2);
   Rectangle::set_width(&mut r, 2);
   @end

   This shows that Rust automatically inserts the borrowing operator `&`.

   Rust has no equivalent of `->` in C++. It automatically derenferences 
   and references when using the dot operator as discussed previously.

** Methods and Ownership

   Methods must be called on structs that have the necessary permissions.
   As an example, we use the three methods that take `&sefl`, `&mut self`,
   and `self`.
   @code rust
   impl Rectangle {    
       fn area(&self) -> u32 {
           self.width * self.height
       }

       fn set_width(&mut self, width: u32) {
           self.width = width;
       }

       fn max(self, other: Rectangle) -> Rectangle {
           Rectangle { 
               width: self.width.max(other.width),
               height: self.height.max(other.height),
           }
       }
   }
   @end

*** Read and Writes with `&self` and `&mut self`
    If we make an owned rectangle with `let rect = Rectangle{...}`, 
    then rect has *RO* permissions. With these permissions, we can 
    call `area` and `max` methods.
    @code rust
    fn main() {
        let rect = Rectangle {
            width: 0,
            height: 0
        };
        println!("{}", rect.area());

        let other_rect = Rectangle { width: 1, height: 1 };
        let max_rect = rect.max(other_rect);
    }
    @end
    Note that after calling `max` *both* `rect` and `other_rect` become 
    unusable because their ownership was moved to the variables in 
    the local stack of the `max` method.

    On the other hand, calling `set_width` will give a compilation 
    error because we are missing *W* permissions.

    This is because we try to mutably borrow an immutable variable.

    We get a similar error if we try to call `set_width` on an 
    immutable reference to a `Rectangle`, even if the underlying 
    rectangle is mutable. 
    This is because immutable borrows are not allowed to coexist with 
    mutable borrows.

*** Moves with self

    Calling a method that expects `self` will move the input struct 
    (unless the struct implements the `Copy` trait).

    For example, as mentioned above, we cannot use a `Rectangle` after 
    we pass it to `max`.

    A similar issue occurs if we try to use a `self` method on a 
    reference since the latter doesn't have *O* permissions.
    If this was allowed, we would have a /double free/ bug.
    @code rust
    impl Rectangle {    
        fn set_to_max(&mut self, other: Rectangle) {
            *self = self.max(other);
        }
    }
    @end

*** Good Moves and Bad Moves

    We may ask why does it matter if we move out of `\*self`? 
    In this example, it is safe to do so because `Rectangle` doesn't
    own any heap data.
    We can get Rust to compile `set_to_max` by adding 
    `\#[derive(Copy,Clone)]` to the definition of `Rectangle`.

    In this case, `self.max(other)` no longer requires the *O* 
    permission on `\*self` or `other` because we have made `Rectangle` 
    copyable.

    We may wonder, why isn't this done by default? 
    Rust does this for stability across API changes. If the author 
    of a library decided to add heap owned data, all code relying 
    on that library would not compile.

    To avoid this issue, API authors must explicitly add 
    `#[derive(Copy)]` to indicate that they expect their struct 
    to always have `Copy`.

    In summary, the issue at hand is that we cannot call a `self` method 
    on a reference `&self` or `&mut self` which is not allowed since 
    `self` tries to take ownership from references which are non-owning 
    pointers. If this was allowed, we would get a /double free/ error.

    So, if you see an error "cannot move out of *self", it's usually the 
    case that we are making this mistake.










