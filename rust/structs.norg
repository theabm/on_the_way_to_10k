A /struct/ is a custom data type that lets you group together 
and name multiple related values that make up a meaningful group.

We have already seen that one method to achieve this are *Tuples*. 
We will discuss when it is appropriate to choose one or the other.

We show how to define and instantiate structs. We also talk about 
associated functions called /methods/.

Structs and Enums are the building blocks to create new types in 
our programs to take full advantage of Rust's compile-time checking.

* Defining and Instatiating Structs
  Structs are similar to tuples in that both can hold different 
  data types. However, unlike tuples, in structs we name each 
  piece of data. This makes them more clear and flexible since we
  don't rely on the order to access the data.

  To *define* and *instantiate* a struct, we do the following: 
  @code rust 
  // we use the struct keyword and a name to define a struct
  struct User {
      // we define the name and types of the pieces of data 
      // which we call *fields*
      active: bool,
      username: String,
      email: String,
      sign_in_count: u64,
  }
  fn main() {
      // to instantiate, use the name of the struct followed by 
      // curly brackets. Inside we have key:value pairs where 
      // the key is the field name and the value is what we want to store
      // we dont have to use the same order as the definition
      let mut user1 = User {
          email: String::from("someone@example.com"),
          username: String::from("someusername123"),
          active: true,
          sign_in_count: 1,
      };
      // to access a specific value, use dot operator. 
      // if instance is mutable, we can change the value of 
      // a specific field.
      user1.email = String::from("anotheremail@example.com");
  }
  @end
  Note that to change the value of a field, the *entire* instance must 
  be mutable.
  *Rust doesnt allow us to mark only certain fields as mutable.*

  We can construct a new instance of a struct as the last expression in 
  a function body to implicitly return that new instance:
  @code rust
  fn build_user(email: String, username: String) -> User {
      User {
          active: true,
          username: username,
          email: email,
          sign_in_count: 1,
      }
  }
  @end

