* Introduction

** Installing 

   To install rust, run the following
   @code bash
   curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf \| sh
   @end

   You will also need to install a `Linker` to join compiled outputs into one. 
   The most common linker is the one you get when you install gcc or clang.

   Once rust is installed, to update it you can run:

   @code bash 
   rustup update
   @end


** Hello world 

   Open a file called hello_world.rs and write the following: 

   @code rust 
    // the main function is declared like this (with no parameters)
    // in rust we place the curly bracket in the same line as the 
    // function declaration
    //
    // To use rust formatting use rustfmt
   fn main() {
    // this prints text to screen. Note:
    // 1. we use indent
    // 2. println! calls a rust macro. Functions dont have !
    // 3. we pass string "Hello, world!"
    // 4. lines are ended with semicolon
        println!("Hello, world!");
    }

   @end

   To compile and run: 
   @code bash
   rustc hello_world.rs
   ./hello_world

   @end

** Using Cargo

   Cargo is Rust's build system and package manager. It is used to manage 
   Rust projects since it:
   - builds your code 
   - downloads libraries your code depends on - a.k.a dependencies
   - building these libraries

   Furthermore, Cargo comes preinstalled with rust if you use official installers.

   Check your version by running: 
   @code bash
   cargo --version
   @end 

*** Creating new cargo project

    To create a new project using cargo, simply run:

    @code bash 
    cargo new hello_cargo 
    @end
    This will create an initialized git repository named
    `hello_cargo` where you will find the following structure:
    - Cargo.toml
    - src directory
    -- main.rs 
    - .git 
    - .gitignore


    * Common Programming Concepts 
  In this section we cover some basic programming concepts and describe them 
  in the context of Rust. We will see:
  - variables 
  - basic types 
  - functions 
  - comments 
  - control flow 

    ** Variables and mutability 
    By default variables are immutable. This is one of the main design choices 
    of rust to encourage safety and easy concurrency.

    However, variables can still be made to be mutable.
    Consider the following example:
    @code rust
        fn main() {
            let x = 5;  
            println!("The value of x is: {x}");
            x = 6; 
            println!("The value of x is: {x}");
        }
    @end
    This code does not compile and we get an immutability error.

    Immutability is helpful because it prevents bugs that occur when we operate 
    under the assumption that variables are constant but in reality get changed 
    throughout the code. 

    However, mutability is necessary in an imperative paradigm.  
    To make a variable mutable, add the `mut` keyword.

    @code rust
        fn main() {
            let x = 5;  
            println!("The value of x is: {x}");
            x = 6; 
            println!("The value of x is: {x}");
        }
@end

This code now compiles.

*** Constant variables

    We can create constant variables with the `const` keyword instead of `let`. 
    They are different from immutable variables in the following: 
    - const variables cannot be used with `mut`
    - const variables must always be type annotated.
    - const variables must *_always_* be known at compile time. 
      On the other hand, immutable variables can be known at run-time. 

    Some useful facts about constants:

    1. The naming convention is MY_CONST_VARIABLE_NAME.

    2. The operations we can use for const expressions are limited by the 
    compiler.

    3. Constants are valid throughout the entire run-time of the code and exist 
    within the scope in which they are declared. 

    4. They can be used in the global scope (outside of a function) while `let`
    can only be used in a function. 

*** Shadowing 

    In Rust we can redeclare variables with the same name and different type. 
    This is called variable *_shadowing_* since the compiler only sees the second 
    variable until its shadowed again or the scope ends.

    An example:
    @code rust 
    fn main() {
        // first variable name
        let x = 5;

        // the variable is shadowed
        let x = x + 1;
        // from this point, x=6

        {
            // variable is shadowed again, x=12
            let x = x * 2;
            println!("The value of x in the inner scope is: {x}");
        } // after scope ends, shadow goes out of scope and we see old 
        // variable once again, i.e x=6

        println!("The value of x is: {x}");
    }
    @end

    - Shadowing is different from marking a variable as `mut` because it allows 
      us to perfom some transformations and then have that variable be 
      immutable for the rest of the code. 
      On the other hand, a `mut` variable can always be changed (even though 
      we may not want it to).

    - The other difference is that since we are effectively creating a new 
      variable, we can change its type. This can't be done if we just mark a 
      variable as `mut` and then try to assign to it a different type without 
      using the `let` keyword to overshadow.

    - A subtle note: when shadowing we can also change the mutability of a the 
      variable.

      This code compiles:
    @code rust 
    // spaces is a string 
    let spaces = "   "; 
    // spaces is now a number
    let spaces = spaces.len();
    @end 
    Note that shadowing can work together with `mut`. The key is using `let` 
    twice.

    This code does not compile:
    @code rust
    // spaces is a string 
    let mut spaces = "   ";
    // here we try to assign an int to spaces 
    // which is declared as a string since 
    // its the same variable.
    spaces = spaces.len();
    @end


* Understanding Ownership 
* Using Structs to Structure Related Data
* Enums and Pattern Matching 
* Managing Growing Projects with Packages, Crates, and Modules
* Common Collections
* Error Handling 
* Generic Types, Traits, and Lifetimes
* Writing Automated Tests
* I/0 
* Functional Language Features: Iterators and Closures
* More about Cargo and Crates.io 
* Smart Pointers
* Concurrency 
* Object Oriented Programming in Rust 
* Patterns and Matching
* Advanced Features: Unsafe Rust, Advanced Traits, Types, Functions, Closures, and Macros










