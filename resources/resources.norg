* AI
** Reinforcement Learning
   - ( ) {https://www.assemblyai.com/blog/deepminds-alphatensor-explained/}[Deep Mind Alpha Tensor Explained]
** Deep Learning
   - ( ) {https://horace.io/brrr_intro.html}[Making Deep Learning Go Brrr From First Principles]
   - ( ) {https://bzolang.blog/p/neural-computing-pt-1-sparse-distributed}[Neural Computing P1 - Sparse Distributed Memory]
   - ( ) {https://bzolang.blog/p/neural-computing-pt-2-sparse-bit}[Neural Computing P2 - Sparse Distributed Memory]
   - ( ) {https://www.youtube.com/watch?app=desktop&v=YAgjfMR9R_M&feature=youtu.be}[Lec: 13 - Attention] - A great resource to learn about attention and transformers.
** Automatic Differentiation
   - ( ) {https://blog.research.google/2023/04/beyond-automatic-differentiation.html?m=1}[Beyond Automatic Differentiation]
   - ( ) {https://dlsyscourse.org/}[Deep Learning Systems] - A course on Deep Learning from a technical 
         perspective. Teaches you to build your own autograd engine.
* Linux
** System
   - ( ) {https://linuxjourney.com/}[Linux Journey]
** Software 
   - {https://suckless.org/}[Suckless.org]
** Questions
   - (x) {https://unix.stackexchange.com/questions/3192/what-is-meant-by-mounting-a-device-in-linux}[What is meant by mounting a device in linux?]
* Programming
** {https://bernsteinbear.com/pl-resources/}[Programming Language Resources]
** {https://austinhenley.com/blog/challengingprojects.html}[Challenging Projects Every Programmer Should Try]
** C
   - ( ) {https://www.assemblyai.com/blog/deepminds-alphatensor-explained/}[What Every C Programmer Should Know About Undefined Behavior]
   - ( ) {https://blog.regehr.org/archives/213}[A Guide TO Undefined Behavior in C and C++, Part 1]
   - ( ) {https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list}[The Definitive C Book Guide and List]
   - ( ) {https://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list}[Michael Abrash's Graphics Programming Black Book, Special Edition]
   - ( ) {https://www.smashthestack.org/main.html#wargames}[Smash The Stack]
   - (x) {https://web.archive.org/web/20080607055623/http://www.ibm.com/developerworks/library/pa-dalign/}[Data Alignment]
   - ( ) {http://phrack.org/issues/49/14.html}[Smashing The Stack For Fun And Profit]
** Assembly 
   - ( ) {https://gcc.gnu.org/onlinedocs/gcc/extensions-to-the-c-language-family/how-to-use-inline-assembly-language-in-c-code.html}[How To Use Inline Assembly Language in C Code]
   - ( ) [Computer Architecture CS 3330]{https://www.cs.virginia.edu/~lat7h/3330/S2022/index.html}
** MPI
   - (x) {https://enccs.github.io/intermediate-mpi/mpi-and-threads-pt1/}[Introducing MPI and Threads]
** OpenMP
   - (x) {https://www.youtube.com/playlist?list=PLLX-Q6B8xqZ8n8bwjGdzBJ25X2utwnoEG}[A Hands-on Introduction to OpenMP by Tim Mattson]
** Rust
   - (-) {https://doc.rust-lang.org/book/title-page.html}[The Book]
   - (-) {https://rust-book.cs.brown.edu/experiment-intro.html}[An Experimental Book]
   - (+) [Amos's Blog]{https://fasterthanli.me/}
   - ( ) {https://github.com/nrc/r4cppp}[Rust for C++]
   - ( ) {https://google.github.io/comprehensive-rust/}[A Rust course developed by Android team at Google]
   - ( ) {https://matklad.github.io/2023/03/26/zig-and-rust.html}[Zig and Rust]
   - ( ) {https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html}[Writing Python Like Its Rust]
   - ( ) {https://www.arewelearningyet.com/}[Are we learning yet? - Rust machine learning ecosystem]
   - ( ) {https://www.rust-lang.org/what/embedded}[Embedded Rust]
   - ( ) {https://cheats.rs/#language-sugar}[Rust Cheat Sheet]
   - ( ) {https://practice.course.rs/}[Rust By Practice]
** Nix
   - (x) {https://nixos.org/manual/nix/stable/}[Nix Manual]
   - (x) {https://nixos.org/manual/nixpkgs/stable/}[NixPkgs Manual]
   - (x) {https://nixos.org/manual/nixos/stable/}[NixOS Manual]
   - (-) {https://nix.dev/}[Nix Dev]
   - (-) {https://nixos.org/guides/nix-pills/}[Nix Pills]
   - (x) {https://noogle.dev/}[Noogle - Find Nix Functions]
   - (-) {https://flakm.com/posts/nixos_rust/01_start/}[Measure Twice Cut Once with NixOS] - Using NixOS to build a federated blogging platform. 
   - (-) {https://tonyfinn.com/blog/nix-from-first-principles-flake-edition/}[Nix from First Principles - Flake Edition]
   - (-) {https://nixos.asia/en/nix-first}[First Steps with Nix]
   - (-) {https://nixcloud.io/tour/?id=introduction/nix}[A Tour Of Nix]
** Jax
   - (-) {https://www.youtube.com/watch?v=SstuvS-tVc0&list=PLBoQnSflObckOARbMK9Lt98Id0AKcZurq}[Jax Tutorial - Aleksa Gordic]
   - (-) {https://jax.readthedocs.io/en/latest/autodidax.html}[Autodidax - Jax Core From Scratch]
** ATS Programming Language
   - {https://www.cs.bu.edu/~hwxi/atslangweb/}[The ATS Programming Language]
** Haskell
   - (x) {https://www.youtube.com/playlist?list=PLF1Z-APd9zK7usPMx3LGMZEHrECUGodd3}[Functional Programming In Haskell]
   - (x) {https://www.youtube.com/playlist?list=PLF1Z-APd9zK5uFc8FKr_di9bfsYv8-lbc}[Advanced Functional Programming In Haskell]
   - (-) {http://learnyouahaskell.com/}[Learn You a Haskell For Greater Good]
   - ( ) {https://www.cs.nott.ac.uk/~pszgmh/fold.pdf}[A Tutorial On The Universality And Expressiveness Of Fold]
   - ( ) {http://learn.hfm.io/}[Learning Haskell]
** Computer Architecture
   - ( ) {https://www.nand2tetris.org/}[Nand2Tetris]
   - ( ) {https://www.eeweb.com/building-a-4-bit-computer-from-the-ground-up/}[Building a 4 Bit Computer From The Ground Up]
   - ( ) [Computer Architecture CS 3330]
   - ( ) {https://teachyourselfcs.com/}[Teach Yourself Computer Science]
** Languages
   - ( ) {https://www.scattered-thoughts.net/writing/implementing-interactive-languages/}[Implementing Interactive Languages]
   - ( ) {https://www.scattered-thoughts.net/#mvs}[Full Blog]
** Risc V
   - ( ) {https://punkx.org/overflow/}[Projekt Overflow]
** x86
   - {https://www.youtube.com/watch?v=KrksBdWcZgQ}[Breaking the x86 Instruction set]
** Mixing Programming Languages
   - ( ) {https://blog.frankel.ch/rust-from-python/}[Calling Rust From Python]
* Tools
** Debugger
   - ( ) {https://www.debuggingbook.org/#}[The Debugging Book]
** Programming Practice
   - ( ) {https://exercism.org/}[Exercism]
   - ( ) {https://www.codewars.com/}[Code Wars]
   - ( ) {https://www.techinterviewhandbook.org/grind75}[Grid 75 Questions]
** Git
   - ( ) {https://v5.chriskrycho.com/essays/jj-init/}[jj-init - What if we could replace Git?]
   - ( ) {https://ohmygit.org/}[An Open Source Game to Learn Git]
* Vim
   - ( ) {https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/dedication}[Boost Your Coding Fu with VsCode and VIM]
* Server Stuff
  -- {https://www.cuttingcords.com/home/ultimate-server/getting-started}[Ultimate Server Part 1]
  -- {https://selfhosted-survey-2023.deployn.de/apps}[Most used services in hosting]
* Privacy
  -- {https://ssd.eff.org/}[Surveillance Self Defense]
  -- {https://www.privacyguides.org/en/}[Privacy Guides]
  -- {https://www.cyber.gov.au/protect-yourself/resources-protect-yourself/personal-security-guides/personal-cyber-security-first-steps}[Personal Cyber Security: First Steps]
  -- {https://anonymousplanet.org/guide.html}[The Hitchhikerâ€™s Guide to Online Anonymity]
* Blogs
  -- (+) [Amos's Blog]
  -- (+) [Julia Evans]{https://jvns.ca/}
  -- (+) [Patrick Kidger]{https://kidger.site/thoughts/just-know-stuff/} 
  -- (+) [Sebastian Mestre]{https://sebmestre.blogspot.com/2023/11/en-writing-compiler-is-surprisingly.html?m=1}
  -- (+) [Xe]{https://xeiaso.net/blog/}
* Misc 
** Blue Blocking Glasses
   - (x) {https://optimizeyourbiology.com/blue-blocker-database}[Find The Best Blue Blocking Glasses]
** Writing
   - (-) {https://developers.google.com/tech-writing/overview}[Technical Writing]
** Poetry
   - {https://johnlisle.us/wp/stedman-history/ballad-of-sir-andrew-barton/}[Ballad Of Sir Andres Barton]




