________

                                Tasks 

_________
$ Ray Remote Function
A python function that is decorated with `@ray.remote` - possibly further 
specifying the required resources for it.

$ Tasks
The asynchronous invocation of a Ray Remote Function. All tasks are scheduled 
and executed in parallel if possible (depending on resource availability).
@code python
import ray
import time

# A regular Python function.
def normal_function():
    return 1

# By adding the `@ray.remote` decorator, a regular Python
# function becomes a Ray remote function.
@ray.remote
def my_function():
    return 1


# To invoke this remote function, use the `remote` method.
# This will immediately return an object ref (a future) 
# and then create a task that will be executed on a 
# worker process.
obj_ref = my_function.remote()

# The result can be retrieved with ``ray.get``.
assert ray.get(obj_ref) == 1


@ray.remote
def slow_function():
    time.sleep(10)
    return 1


# Ray tasks are executed in parallel.
# All computation is performed in the background, 
# driven by Ray's internal event loop.
for _ in range(4):
    # This doesn't block.
    slow_function.remote()
@end
* Specifying Required Resources

  We can specify resource requirements in tasks by passing arguments to 
  `ray.remote`.
  @code python
  # Specify required resources.
  @ray.remote(num_cpus=4, num_gpus=2)
  def my_function():
      return 1


  # Override the default resource requirements.
  my_function.options(num_cpus=3).remote()
  @end

* Passing Object Refs To Ray Tasks

  In addition to values, *Object references* can also be passed to remote 
  functions. When the task gets executed, inside the function body, the 
  argument will be the underlying value. 
  @code python
  @ray.remote
  def function_with_an_argument(value):
      return value + 1


  obj_ref1 = my_function.remote()
  assert ray.get(obj_ref1) == 1

  # You can pass an object ref as an argument to 
  # another Ray task.
  obj_ref2 = function_with_an_argument.remote(obj_ref1)
  assert ray.get(obj_ref2) == 2
  @end
*Note*: In the example, two important behaviors happen:
  ~ Since the second task depends on the first, Ray will not execute it until the 
    first is finished.
  ~ If the tasks are scheduled on different machines, the value corresponding 
    to `obj_ref1` will be sent over the network to the machine where the second 
    task is scheduled.

* Waiting For Partial Results

  `ray.get` blocks until the task is finished. If we launch a batch of tasks, 
  we may want to know which have finished, without blocking. This can be done 
  with `ray.wait`.
  @code python
  @ray.remote
  def slow_function():
      time.sleep(10)
      return 1

  object_refs = [slow_function.remote() for _ in range(2)]
  # Return as soon as one of the tasks finished execution.
  ready_refs, remaining_refs = ray.wait(
      object_refs, 
      num_returns=1, 
      timeout=None
  )
  @end
* Generators

  Ray tasks are compatible with python generator syntax. *TODO*

* Multiple Returns

  By default, a Ray task only returns a single Object Ref. 
  However, you can configure Ray tasks to return multiple Object Refs, by 
  setting the `num_returns` option.
  @code python
  # By default, a Ray task only returns a single Object Ref.
  @ray.remote
  def return_single():
      return 0, 1, 2

  object_ref = return_single.remote()
  assert ray.get(object_ref) == (0, 1, 2)

  # However, you can configure Ray tasks to return multiple 
  # Object Refs.
  @ray.remote(num_returns=3)
  def return_multiple():
      return 0, 1, 2

  object_ref0, object_ref1, object_ref2 = return_multiple.remote()
  assert ray.get(object_ref0) == 0
  assert ray.get(object_ref1) == 1
  assert ray.get(object_ref2) == 2
  @end

  Ray also supports remote generators that allow a task to return one 
  object at a time to reduce memory usage at the worker.
  @code python
  @ray.remote(num_returns=3)
  def return_multiple_as_generator():
      for i in range(3):
          yield i


  # NOTE: Similar to normal functions, these objects will not be available
  # until the full task is complete and all returns have been generated.
  a, b, c = return_multiple_as_generator.remote()
  @end
We can also dynamically the number of return values.


* How Are Tasks Scheduled

  For each task, Ray will choose a node to run it. The scheduling decision 
  is based on a few factors like the taskâ€™s *resource requirements*, the 
  *specified scheduling strategy* and the *locations of task arguments*. 

* Retrying Tasks & Task Events

  Ray will retry failed tasks. This behavior can be changed by setting 
  `max_retries` and `retry_exceptions` in `ray.remote` and `.options`.

* Task Events

  By default, Ray traces the execution of tasks, reporting task status events 
  and profiling events that the Ray Dashboard and State API use.

  This can be changed by setting `enable_task_events` in `ray.remote` and 
  `.options` which reduces the overhead of tasks. 
































