Haskell : A functional programming language 



* Introduction

  What is a functional language? 

  - A style of programming in which the basic method of computation 
    is the application of functions to arguments.
  - A language that supports and encourages functional style.

  In a purely functional language, we do not have variable 
  assignment, i.e. there is no concept of *_state_*. 

* First Steps

  We use GHCi which is the leading implementation of the Haskell language. 
  It has both a compiler and interpreter. The interpreter can be used 
  for interactive learning. 

** GHCi Commands

   :load name  - load script name 
   :reload     - reload current script 
   :set editor name - set the editr you use
   :edit name - edit a certain script 
   :edit - edit current script 
   :type expr - show type of expression
   :?  - show all commands
   :quit - quit GHCi

** The standard prelude

   Haskell has a large number of standard library functions.
   Some popular functions are:

   @code bash 
   ghci> head [1,2,3,4] 
   ghci> 1
   ghci> tail [1,2,3,4] 
   ghci> [2,3,4]
   ghci> [1,2,3,4] !! 2
   ghci> 3
   ghci> take 2 [1,2,3,4]
   ghci> [1,2]
   ghci> drop 3 [1,2,3,4,5]
   ghci> [4,5]
   ghci> length [1,2,3,4,5]
   ghci> 5
   ghci> sum [1,2,3,4,5]
   ghci> 15
   ghci> product [1,2,3,4,5]
   ghci> 120
   ghci> [1,2,3] ++ [4,5]
   ghci> [1,2,3,4,5]
   ghci> reverse [1,2,3,4,5]
   ghci> [5,4,3,2,1]
   @end

   Note that some functions are of the form `f a b` while others are of the 
   form `a f b`. The latter syntax is called an *infix* operator.
   All functions can be expresses as an infix operator through the 
   use of backticks:

   @code haskell 
   ghci> 2 `take` [1,2,3,4,]
   ghci> [1,2]
   @end

   Some functions are easier to read when using this syntax such as the 
   `div` function.

** Naming Requirements 
   - Function names and arguments must begin with lowercase letters. 
   - Capital letters are reserved for types.
   - List arguments usually have an `s` suffix

** Layout Rule

   In a sequence of definitions, each definition must begin in the 
   same column. Think of python indenting.

   So we can avoid using `{}` for grouping. However, we can still use 
   them if we prefer.





