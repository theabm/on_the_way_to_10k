* On the way to 10k 

  This is my own personal growth project. 

  Legend says that if you put 10,000 hours on a specific topic, 
  you will become a master in it. 

  Therefore, the aim of this project is to put those 10,000 hours on 
  the various tools I will find along my journey. The topics may not 
  be cohesive in any sense as I try to document all the things I find 
  interesting.

  For example, the material may include new programming 
  languages, better tools for sofware developing, ideas for workflow 
  management, as well as more in depth analysis in areas I already 
  posses some versatility in. 

  However, they all coexist under the paradigm of self-improvement. 
  The ultimate goal is to document my learning journey as I attempt 
  at becoming a better version of myself, while also making these 
  tools available for anyone in a similar path.

* Table of contents

** {:docker/docker:}[Docker]

** {:dash/dash:}[Dash]

** {:rust/rust:}[Rust]
*** {:rust/getting_started:}[Getting Started]
**** {:rust/getting_started:# Installing}[Installing]
**** {:rust/getting_started:# Hello World}[Hello World]
**** {:rust/getting_started:# Using Cargo}[Using Cargo]
*** {:rust/common_programming_concepts:}[Common Programming Concepts]
**** {:rust/common_programming_concepts:# Variables and Mutability}[Variables and Mutability]
**** {:rust/common_programming_concepts:# Data Types}[Data Types]
**** {:rust/common_programming_concepts:# Functions}[Functions]
***** {:rust/common_programming_concepts:# Statements and Expressions}[Statements and Expressions]
**** {:rust/common_programming_concepts:# Control Flow}[Control Flow]
***** {:rust/common_programming_concepts:# if Expressions}[if Expressions Flow]
***** {:rust/common_programming_concepts:# loop Expressions}[loop Expressions]
***** {:rust/common_programming_concepts:# while Statements}[while Statements]
***** {:rust/common_programming_concepts:# for Statements}[for Statements]
*** {:rust/ownership:}[Understanding Ownership]
**** {:rust/ownership:# What Is Ownership?}[What Is Ownership?]
**** {:rust/ownership:# References and Borrowing}[References and Borrowing]
**** {:rust/ownership:# Fixing Ownership Errors}[Fixing Ownership Errors]
**** {:rust/ownership:# The Slice Type}[The Slice Type]
**** {:rust/ownership:# Ownership Recap}[Ownership Recap]
*** {:rust/structs:}[Using Structs to Structure Related Data]
**** {:rust/structs:# Defining and Instantiating Structs}[Defining and Instantiating Structs]
**** {:rust/structs:# An Example Program Using Structs}[An Example Program Using Structs] 
**** {:rust/structs:# Method Syntax}[Method Syntax]
*** {:rust/enums:}[Enums and Pattern Matching]
**** {:rust/enums:# Defining an Enum}[Defining an Enum]
**** {:rust/enums:# The match Control Flow Construct}[The match Control Flow Construct]
**** {:rust/enums:# Concise Control Flow with if let}[Concise Control Flow with if let]
*** {:rust/crates:}[Managing Growing Projects with Packages, Crates, and Modules]
**** {:rust/crates:# Packages and Crates}[Packages and Crates]
**** {:rust/crates:# Defining Modules to Control Scope and Privacy}[Defining Modules to Control Scope and Privacy]
**** {:rust/crates:# Paths for Referring to an Item in the Module Tree}[Paths for Referring to an Item in the Module Tree]
**** {:rust/crates:# Bringing Paths Into Scope with the use Keyword}[Bringing Paths Into Scope with the use Keyword]
**** {:rust/crates:# Separating Modules into Different Files}[Separating Modules into Different Files]
*** Common Collections
**** {:rust/collections/vectors:}[Storing Lists of Values with Vectors]
**** {:rust/collections/strings:}[Storing UTF-8 Encoded Text with Strings]
**** {:rust/collections/hash_maps:}[Storing Keys with Associated Values in Hash Maps]
*** Error Handling
**** {:rust/errors:# Unrecoverable Errors with `panic!`}[Unrecoverable Errors with panic!]
**** {:rust/errors:# Recoverable Errors with Result}[Recoverable Errors with Result]
**** {:rust/errors:# To `panic!` or Not to `panic!`}[To panic! or Not to panic!]
*** Generic Types, Traits, and Lifetimes
**** {:rust/generic_types:}[Generic Data Types]
**** {:rust/traits:}[Traits: Defining Shared Behavior]
**** {:rust/lifetimes:}[Validating References with Lifetimes]
*** Writing Automated Tests
**** {:rust/writing_tests:}[How To Write Tests]
**** {:rust/run_tests:}[Controlling How Tests Are Run]
**** {:rust/test_organization:}[Tests Organization]
*** Iterators and Closures
**** {:rust/closures:}[Closures]
**** {:rust/iterators:}[Iterators]

** {:dask/dask:}[Dask]
*** {:dask/best-practices:}[Best Practices]
*** {:dask/arrays:}[Arrays]


** cmake 
*** {:cmake/basics.norg:}[basics]

** Nix Tutorial - Fernando Ayats
*** {:nix/day1:}[Day1 - Language, Derivation, Library]

** Tracking
*** {:tracking/2024:}[2024]

** Git and Github
*** {:git/beginner:}[Beginner Concepts]
*** {:git/intermediate:}[Intermediate Concepts]
*** {:git/advanced:}[Advanced Concepts]

** Missing semester of CS
*** {:missingcs/l1:}[Lecture 1]
*** {:missingcs/l1:}[Lecture 2]
*** {:missingcs/l1:}[Lecture 3]
*** {:missingcs/l1:}[Lecture 4]
*** {:missingcs/l1:}[Lecture 5]
*** {:missingcs/l1:}[Lecture 6]
*** {:missingcs/l1:}[Lecture 7]
*** {:missingcs/l1:}[Lecture 8]
*** {:missingcs/l1:}[Lecture 9]

** {:haskell/haskell:}[Haskell]

** {:neorg/neorg:}[Neorg] 
*** {:neorg/introduction:}[Introduction]
*** {:neorg/modules:}[Modules]
*** {:neorg/commands:}[Commands]
*** {:neorg/syntax:}[Syntax]
*** {:neorg/links:}[Links]
*** {:neorg/todo:}[To-Do Items]
*** {:neorg/journals_summaries:}[Journals And Summaries]
*** {:neorg/automation:}[Automation]

** {:linux/linux:}[Linux]

** HPC
*** {:hpc/single_core_optimization/single_core_optimization:}[Single Core Optimization]
*** {:hpc/openmp/openmp:}[OpenMP]

** {:profiling/profiling:}[Profiling]

** {:resources/resources:}[Resources]




