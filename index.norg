* On the way to 10k 

  This is my own personal growth project. 

  Legend says that if you put 10,000 hours on a specific topic, 
  you will become a master in it. 

  Therefore, the aim of this project is to put those 10,000 hours on 
  the various tools I will find along my journey. The topics may not 
  necessarily be cohesive in the traditional sense. 

  For example, the material may include new programming 
  languages, better tools for sofware developing, ideas for workflow 
  management, as well as advanced themes in areas I already 
  posses some versatility in. 

  However, they all coexist under the paradigm of self improvement. 
  The ultimate goal is to document my learning journey as I attempt 
  at becoming a master version of myself, as well as make these 
  tools available for anyone in a similar path.

* Table of contents

** {:dash/dash:}[Dash]

** {:rust/rust:}[Rust]
*** {:rust/getting_started:}[Getting Started]
**** {:rust/getting_started:# Installing}[Installing]
**** {:rust/getting_started:# Hello World}[Hello World]
**** {:rust/getting_started:# Using Cargo}[Using Cargo]
*** {:rust/common_programming_concepts:}[Common Programming Concepts]
**** {:rust/common_programming_concepts:# Variables and Mutability}[Variables and Mutability]
**** {:rust/common_programming_concepts:# Data Types}[Data Types]
**** {:rust/common_programming_concepts:# Functions}[Functions]
***** {:rust/common_programming_concepts:# Statements and Expressions}[Statements and Expressions]
**** {:rust/common_programming_concepts:# Control Flow}[Control Flow]
***** {:rust/common_programming_concepts:# if Expressions}[if Expressions Flow]
***** {:rust/common_programming_concepts:# loop Expressions}[loop Expressions]
***** {:rust/common_programming_concepts:# while Statements}[while Statements]
***** {:rust/common_programming_concepts:# for Statements}[for Statements]
*** {:rust/ownership:}[Understanding Ownership]
**** {:rust/ownership:# What Is Ownership?}[What Is Ownership?]
**** {:rust/ownership:# References and Borrowing}[References and Borrowing]
**** {:rust/ownership:# Fixing Ownership Errors}[Fixing Ownership Errors]
**** {:rust/ownership:# The Slice Type}[The Slice Type]
**** {:rust/ownership:# Ownership Recap}[Ownership Recap]
*** {:rust/structs:}[Using Structs to Structure Related Data]
**** {:rust/structs:# Defining and Instantiating Structs}[Defining and Instantiating Structs]
**** {:rust/structs:# An Example Program Using Structs}[An Example Program Using Structs] 
**** {:rust/structs:# Method Syntax}[Method Syntax]
*** {:rust/enums:}[Enums and Pattern Matching]
**** {:rust/enums:# Defining an Enum}[Defining an Enum]
**** {:rust/enums:# The match Control Flow Construct}[The match Control Flow Construct]
**** {:rust/enums:# Concise Control Flow with if let}[Concise Control Flow with if let]
*** Managing Growing Projects with Packages, Crates, and Modules
**** Packages and Crates
**** Defining Modules to Control Scope and Privacy
**** Paths for Referring to an Item in the Module Tree
**** Bringing Paths Into Scope with the use Keyword
**** Separating Modules into Different Files

** {:haskell/haskell:}[Haskell]

** {:neorg/neorg:}[Neorg] 
*** {:neorg/introduction:}[Introduction]
*** {:neorg/modules:}[Modules]
*** {:neorg/commands:}[Commands]
*** {:neorg/syntax:}[Syntax]
*** {:neorg/links:}[Links]
*** {:neorg/todo:}[To-Do Items]
*** {:neorg/journals_summaries:}[Journals And Summaries]
*** {:neorg/automation:}[Automation]

** Latex
*** Latex Basics
*** Working with LaTeX
*** Document Structure
*** Logical Structure
*** Document Classes
*** Extending LaTeX
*** Using Graphics
*** LaTeX Tables
*** Cross-Referencing
*** Mathematics
*** Fonts & Spacing
*** Citations & References
*** Structuring Sources
*** Fonts & Unicode Engines
*** Error Handling
*** Help & Documentation


** Org

** {:linux/linux:}[Linux]

** HPC
*** {:hpc/single_core_optimization/single_core_optimization:}[Single Core Optimization]
*** {:hpc/openmp/openmp:}[OpenMP]

** {:profiling/profiling:}[Profiling]

** {:resources/resources:}[Resources]




